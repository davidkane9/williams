{
    "collab_server" : "",
    "contents" : "#' @title First Name Scraper\n#' @description Scrapes graduates first name for honor details\n#' @param grad_details a graduates graduation details\n#'                     supplied as: (1) <firstname> <midlename(s)> <lastname>, <honors details>\n#'                              or, (2) <firstname> <midlename(s)> <lastname>\n#' @return graduate's first name\nscrape_first_name <- function(grad_details){\n  start_pos <- 1\n  end_pos <- regexpr(' ', grad_details) - 1\n  return(substr(grad_details, start_pos, end_pos))\n}\n\n#' @title Last Name Scraper\n#' @description Scrapes graduates last name for honor details\n#' @param grad_details a graduates graduation details\n#'                     supplied as: (1) <firstname> <midlename(s)> <lastname>, <honors details>\n#'                              or, (2) <firstname> <midlename(s)> <lastname>\n#' @return graduate's last name\nscrape_last_name <- function(grad_details){\n  # delete honors details\n  honors_index <- regexpr(\",\", grad_details)\n  if(honors_index > 0){\n    grad_details <- substr(grad_details, 1, honors_index - 1)\n  }\n  # now, substring\n  space_indices <- gregexpr(\" \", grad_details)[[1]]\n  last_space_index <- space_indices[length(space_indices)]\n  return(substr(grad_details, last_space_index + 1, nchar(grad_details)))\n}\n\n#' @title Middle Name Scraper\n#' @description Scrapes graduates middle name for honor details\n#' @param grad_details a graduates graduation details\n#'                     supplied as: (1) <firstname> <midlename(s)> <lastname>, <honors details>\n#'                              or, (2) <firstname> <midlename(s)> <lastname>\n#' @return graduate's middle name\nscrape_middle_name <- function(grad_details){\n  # delete honors details\n  honors_index <- regexpr(\",\", grad_details)\n  if(honors_index > 0){\n    grad_details <- substr(grad_details, 1, honors_index - 1)\n  }\n  # now, substring\n  space_indices <- gregexpr(\" \", grad_details)[[1]]\n  first_space_index <- space_indices[1]\n  last_space_index <- space_indices[length(space_indices)]\n  return(substr(grad_details, first_space_index + 1, last_space_index - 1))\n}\n\n#' @title Primary Honors Scraper\n#' @description Scrapes primary honor details\n#'              We define the \"primary\" honor as the first honor appearing alongside grad's name\n#' @param grad_details a graduates graduation details\n#'                     supplied as: (1) <firstname> <midlename(s)> <lastname>, <honors details>\n#'                              or, (2) <firstname> <midlename(s)> <lastname>\n#' @return (1) \"NONE\" if no honors\n#'         (2) \"HIGHEST\" if grad recieved (highest) honors for thesis\n#'         (3) \"HONORS\" if grad received (ordinary) honors for thesis\nscrape_primary_honors <- function(grad_details) {\n  prim_honors_start_index <- regexpr(\",\", grad_details) + 1\n  if(prim_honors_start_index <= 0){\n    return(\"NONE\")\n  }\n  grad_details <- substr(grad_details, prim_honors_start_index, nchar(grad_details))\n  prim_honors_end_index <- regexpr(\",\", grad_details)\n  if(prim_honors_end_index > 0){\n    grad_details <- substr(grad_details, 1, prim_honors_end_index - 1)\n  }\n  if(regexpr(\"highest\", grad_details) > 0){\n    return(\"HIGHEST\")\n  } else {\n    return(\"HONORS\")\n  }\n}\n\n#' @title Primary Honors Major Scraper\n#' @description Scrapes primary honor details\n#'              We define the \"primary\" honor as the first honor appearing alongside grad's name\n#' @param grad_details a graduates graduation details\n#'                     supplied as: (1) <firstname> <midlename(s)> <lastname>, <honors details>\n#'                              or, (2) <firstname> <midlename(s)> <lastname>\n#' @return (1) \"NONE\" if no honors\n#'         (2) <major> if grad did a thesis\nscrape_primary_honors_major <- function(grad_details) {\n  prim_honors_start_index <- regexpr(\",\", grad_details) + 1\n  if(prim_honors_start_index <= 0){\n    return(\"NONE\")\n  }\n  grad_details <- substr(grad_details, prim_honors_start_index, nchar(grad_details))\n  prim_honors_end_index <- regexpr(\",\", grad_details)\n  if(prim_honors_end_index > 0){\n    grad_details <- substr(grad_details, 1, prim_honors_end_index - 1)\n  }\n  major_start_index <- regexpr(\" in \", grad_details) + nchar(\" in \")\n  return(substr(grad_details, major_start_index, nchar(grad_details)))\n}\n\n#' @title Secondary Honors Scraper\n#' @description Scrapes secondary honor details\n#'              We define the \"secondary\" honor as the second honor appearing alongside grad's name\n#' @param grad_details a graduates graduation details\n#'                     supplied as: (1) <firstname> <midlename(s)> <lastname>, <honors details>\n#'                              or, (2) <firstname> <midlename(s)> <lastname>\n#' @return (1) \"NONE\" if no honors\n#'         (2) \"HIGHEST\" if grad recieved (highest) honors for thesis\n#'         (3) \"HONORS\" if grad received (ordinary) honors for thesis\nscrape_secondary_honors <- function(grad_details) {\n  comma_indices <- gregexpr(\",\", grad_details)[[1]]\n  if(length(comma_indices) < 2){\n    return(\"NONE\")\n  }\n  secondary_honors_start_index <- comma_indices[2] + 1\n  secondary_honors_end_index <- nchar(grad_details)\n  grad_details <- substr(grad_details, secondary_honors_start_index, secondary_honors_end_index)\n  if(regexpr(\"highest\", grad_details) > 0){\n    return(\"HIGHEST\")\n  } else {\n    return(\"HONORS\")\n  }\n}\n\n#' @title Secondary Honors Major Scraper\n#' @description Scrapes secondary honor details\n#'              We define the \"secondary\" honor as the second honor appearing alongside grad's name\n#' @param grad_details a graduates graduation details\n#'                     supplied as: (1) <firstname> <midlename(s)> <lastname>, <honors details>\n#'                              or, (2) <firstname> <midlename(s)> <lastname>\n#' @return (1) \"NONE\" if no honors\n#'         (2) <major> if grad did a second thesis\nscrape_secondary_honors_major <- function(grad_details) {\n  comma_indices <- gregexpr(\",\", grad_details)[[1]]\n  if(length(comma_indices) < 2){\n    return(\"NONE\")\n  }\n  secondary_honors_start_index <- comma_indices[2] + 1\n  secondary_honors_end_index <- nchar(grad_details)\n  grad_details <- substr(grad_details, secondary_honors_start_index, secondary_honors_end_index)\n  major_start_index <- regexpr(\" in \", grad_details) + nchar(\" in \")\n  return(substr(grad_details, major_start_index, nchar(grad_details)))\n}\n",
    "created" : 1488493728524.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4147239333",
    "id" : "AAEAE8EA",
    "lastKnownWriteTime" : 1488498252,
    "last_content_update" : 1488498252938,
    "path" : "~/KT/williamsmetrics/R/scrape-graduation-info.R",
    "project_path" : "R/scrape-graduation-info.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}